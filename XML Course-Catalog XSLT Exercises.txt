1) Return a list of department titles. 

<?xml version="1.0" encoding="ISO-8859-1"?>
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match= "Department">
            <Title> <xsl:value-of select = "Title"  /> </Title>
        </xsl:template>     
    </xsl:stylesheet>

========================================================================================
2) Return a list of department elements with no attributes and two subelements each: the department title and the entire Chair subelement structure. 

<?xml version="1.0" encoding="ISO-8859-1"?>
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="Department">
        <Department>
            <xsl:copy-of select="Title" />
            <xsl:copy-of select="Chair" />
        </Department>
    </xsl:template>
    </xsl:stylesheet>

========================================================================================
3) Create an HTML table with one-pixel border that lists all CS department courses with enrollment greater than 200. Each row should contain three cells: the course number in italics, course title in bold, and enrollment. Sort the rows alphabetically by course title. No header is needed.

<?xml version="1.0" encoding="ISO-8859-1"?>
    <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
        <xsl:template match="/">
        <table border = "1">
            <xsl:for-each select="Course_Catalog/Department/Course[@Enrollment &gt; 200]">
            <xsl:sort select="Title" data-type="text" order="ascending"/>
      
                   <tr>
                     <td><i><xsl:value-of select="@Number"/></i></td>
                     <td><b><xsl:value-of select="Title"/></b></td>
                     <td><xsl:value-of select="@Enrollment"/></td>
                     </tr>

========================================================================================
