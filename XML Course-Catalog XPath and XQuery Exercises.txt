1) Return all Title elements (of both departments and courses). 

doc("courses.xml") /Course_Catalog// Title

=================================================================================

2) Return last names of all department chairs. 

doc("courses.xml") // Chair / Professor / Last_Name

==================================================================================

3) Return titles of courses with enrollment greater than 500. 

doc("courses.xml") /Course_Catalog/ Department/Course[@Enrollment > 500]/Title

===================================================================================

4) Return titles of departments that have some course that takes "CS106B" as a prerequisite. 

doc("courses.xml") /Course_Catalog/ Department [Course/Prerequisites/Prereq = "CS106B" ] / Title

===================================================================================

5) Return last names of all professors or lecturers who use a middle initial. Don't worry about eliminating duplicates. 

doc("courses.xml") //( Professor | Lecturer ) [ Middle_Initial ] /Last_Name

===================================================================================

6) Return the count of courses that have a cross-listed course (i.e., that have "Cross-listed" in their description).

doc("courses.xml") /Course_Catalog/  count (//Course [contains (Description, "Cross-listed") ])

===================================================================================

7) Return the average enrollment of all courses in the CS department. 

doc("courses.xml") /Course_Catalog/Department [@Code="CS" ]/ avg (Course/@ Enrollment)

===================================================================================

8) Return last names of instructors teaching at least one course that has "system" in its description and enrollment greater than 100. 

doc("courses.xml") /Course_Catalog/ Department/Course[@Enrollment > 100 and contains (Description, "system")] //( Professor | Lecturer ) / Last_Name

===================================================================================

9) Return the title of the course with the largest enrollment. 

doc("courses.xml") //Course[@ Enrollment  = max (doc("courses.xml") //Course/@ Enrollment)] / Title

===================================================================================

10) Return course numbers of courses that have the same title as some other course.

doc("courses.xml")//Course[Title =  following:: */ Title or Title = preceding::*/ Title] / data(@Number) 

===================================================================================

11) Return the number (count) of courses that have no lecturers as instructors. 

count(doc("courses.xml")//Course[count(Instructors[Lecturer]) = 0])

===================================================================================

12) Return titles of courses taught by the chair of a department. For this question, you may assume that all professors have distinct last names.

doc("courses.xml") //Course[Instructors/Professor/Last_Name =
       doc("courses.xml")//Department/Chair/ Professor /Last_Name] / Title

===================================================================================

13) Return titles of courses taught by a professor with the last name "Ng" but not by a professor with the last name "Thrun".

doc("courses.xml")//Course[
           Instructors/Professor/Last_Name = "Ng" and
           count(Instructors/Professor[Last_Name = "Thrun"]) = 0]/Title

===================================================================================

14) Create a summary of CS classes: List all CS department courses in order of enrollment. For each course include only its Enrollment (as an attribute) and its Title (as a subelement). 

 <Summary>
{ for $b in doc("courses.xml")//Department[@Code="CS" ]/Course
 order by xs:int ($b/@Enrollment)
return 
         <Course>
          {$b/ @Enrollment }
           { $b /Title }
        </Course> }
</Summary>

===================================================================================

15) Return a "Professors" element that contains as subelements a listing of all professors in all departments, sorted by last name with each professor appearing once. The "Professor" subelements should have the same structure as in the original data. For this question, you may assume that all professors have distinct last names. Watch out -- the presence/absence of middle initials may require some special handling. 


<Professors>{
for $b in distinct-values(doc("courses.xml")//Professor/Last_Name)
for $f in (doc("courses.xml")//Professor[Last_Name = $b])[1]
order by $f/Last_Name
return $f
}</Professors>

===================================================================================


